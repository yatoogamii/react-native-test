{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/elias/github/AwesomeProject/App.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nvar Stack = createStackNavigator();\nimport { LoginScreen } from \"./components/LoginScreen\";\nimport { HomeScreen } from \"./components/HomeScreen\";\nexport default function App() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      logged = _useState4[0],\n      setLogged = _useState4[1];\n\n  function checkUserAlreadyLogged() {\n    var userAlreadyLogged;\n    return _regeneratorRuntime.async(function checkUserAlreadyLogged$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"logged\"));\n\n          case 3:\n            userAlreadyLogged = _context.sent;\n\n            if (!!userAlreadyLogged) {\n              setLogged(true);\n            }\n\n            setIsLoading(false);\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  }\n\n  useEffect(function () {\n    checkUserAlreadyLogged();\n    console.log(logged);\n  });\n  return React.createElement(StackNavigatorLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    }\n  }, React.createElement(SwitchNavigation, {\n    isLoading: isLoading,\n    logged: logged,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    }\n  }));\n}\n\nfunction SwitchNavigation(_ref) {\n  var isLoading = _ref.isLoading,\n      logged = _ref.logged;\n\n  if (isLoading) {\n    return React.createElement(View, {\n      style: {\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      }\n    }, React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      }\n    }, \"Ecran de chargement\"));\n  } else if (logged) {\n    return React.createElement(Stack.Screen, {\n      name: \"Home\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      }\n    }, function (props) {\n      return React.createElement(HomeScreen, _extends({}, props, {\n        setLogged: setLogged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        }\n      }));\n    });\n  } else {\n    return React.createElement(Stack.Screen, {\n      name: \"Login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      }\n    }, function (props) {\n      return React.createElement(LoginScreen, _extends({}, props, {\n        setLogged: setLogged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        }\n      }));\n    });\n  }\n}\n\nfunction StackNavigatorLayout(_ref2) {\n  var children = _ref2.children;\n  return React.createElement(NavigationContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    }\n  }, React.createElement(Stack.Navigator, {\n    screenOptions: {\n      headerStyle: {\n        backgroundColor: \"#1d1d1d\"\n      },\n      headerTintColor: \"#fff\",\n      headerTitleStyle: {},\n      headerTitleAlign: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    }\n  }, children));\n}","map":{"version":3,"sources":["/home/elias/github/AwesomeProject/App.tsx"],"names":["React","useState","useEffect","NavigationContainer","createStackNavigator","Stack","LoginScreen","HomeScreen","App","isLoading","setIsLoading","logged","setLogged","checkUserAlreadyLogged","AsyncStorage","getItem","userAlreadyLogged","console","log","SwitchNavigation","flex","justifyContent","alignItems","props","StackNavigatorLayout","children","headerStyle","backgroundColor","headerTintColor","headerTitleStyle","headerTitleAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { AsyncStorage } from \"react-native\";\n\nconst Stack = createStackNavigator();\n\nimport { LoginScreen } from \"./components/LoginScreen\";\nimport { SignInScreen } from \"./components/SignInScreen\";\nimport { HomeScreen } from \"./components/HomeScreen\";\n\nexport default function App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [logged, setLogged] = useState(false);\n\n  async function checkUserAlreadyLogged() {\n    try {\n      const userAlreadyLogged = await AsyncStorage.getItem(\"logged\");\n      if (!!userAlreadyLogged) {\n        setLogged(true);\n      }\n      setIsLoading(false);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  useEffect(() => {\n    checkUserAlreadyLogged();\n    console.log(logged);\n  });\n\n  return (\n    <StackNavigatorLayout>\n      <SwitchNavigation isLoading={isLoading} logged={logged} />\n    </StackNavigatorLayout>\n  );\n}\n\nfunction SwitchNavigation({ isLoading, logged }) {\n  if (isLoading) {\n    return (\n      <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n        <Text>Ecran de chargement</Text>\n      </View>\n    );\n  } else if (logged) {\n    return (\n      <Stack.Screen name=\"Home\">\n        {props => <HomeScreen {...props} setLogged={setLogged} />}\n      </Stack.Screen>\n    );\n  } else {\n    return (\n      <Stack.Screen name=\"Login\">\n        {props => <LoginScreen {...props} setLogged={setLogged} />}\n      </Stack.Screen>\n    );\n  }\n}\n\nfunction StackNavigatorLayout({ children }) {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator\n        screenOptions={{\n          headerStyle: {\n            backgroundColor: \"#1d1d1d\"\n          },\n          headerTintColor: \"#fff\",\n          headerTitleStyle: {},\n          headerTitleAlign: \"center\"\n        }}>\n        {children}\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}