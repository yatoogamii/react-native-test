{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/elias/github/AwesomeProject/App.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nvar Stack = createStackNavigator();\nimport { LoginScreen } from \"./components/LoginScreen\";\nimport { HomeScreen } from \"./components/HomeScreen\";\nexport default function App() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      logged = _useState4[0],\n      setLogged = _useState4[1];\n\n  function checkUserAlreadyLogged() {\n    var userAlreadyLogged;\n    return _regeneratorRuntime.async(function checkUserAlreadyLogged$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"logged\"));\n\n          case 3:\n            userAlreadyLogged = _context.sent;\n\n            if (!!userAlreadyLogged) {\n              setLogged(true);\n            }\n\n            setIsLoading(false);\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  }\n\n  useEffect(function () {\n    checkUserAlreadyLogged();\n  });\n\n  if (isLoading) {\n    return React.createElement(View, {\n      style: {\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      }\n    }, React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      }\n    }, \"Ecran de chargement\"));\n  }\n\n  return React.createElement(NavigationContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    }\n  }, React.createElement(Stack.Navigator, {\n    screenOptions: {\n      headerStyle: {\n        backgroundColor: \"#1d1d1d\"\n      },\n      headerTintColor: \"#fff\",\n      headerTitleStyle: {},\n      headerTitleAlign: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    }\n  }, React.createElement(Stack.Screen, {\n    name: \"Login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    }\n  }, function (props) {\n    return React.createElement(LoginScreen, {\n      setLogged: setLogged,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      }\n    });\n  }), logged && React.createElement(Stack.Screen, {\n    name: \"Home\",\n    component: HomeScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    }\n  })));\n}","map":{"version":3,"sources":["/home/elias/github/AwesomeProject/App.tsx"],"names":["React","useState","useEffect","NavigationContainer","createStackNavigator","Stack","LoginScreen","HomeScreen","App","isLoading","setIsLoading","logged","setLogged","checkUserAlreadyLogged","AsyncStorage","getItem","userAlreadyLogged","console","log","flex","justifyContent","alignItems","headerStyle","backgroundColor","headerTintColor","headerTitleStyle","headerTitleAlign","props"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,oBAAT,QAAqC,yBAArC;;AAIA,IAAMC,KAAK,GAAGD,oBAAoB,EAAlC;AAEA,SAASE,WAAT;AAEA,SAASC,UAAT;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA,kBACMP,QAAQ,CAAC,IAAD,CADd;AAAA;AAAA,MACrBQ,SADqB;AAAA,MACVC,YADU;;AAAA,mBAEAT,QAAQ,CAAC,KAAD,CAFR;AAAA;AAAA,MAErBU,MAFqB;AAAA,MAEbC,SAFa;;AAI5B,WAAeC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEoCC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAFpC;;AAAA;AAEUC,YAAAA,iBAFV;;AAGI,gBAAI,CAAC,CAACA,iBAAN,EAAyB;AACvBJ,cAAAA,SAAS,CAAC,IAAD,CAAT;AACD;;AACDF,YAAAA,YAAY,CAAC,KAAD,CAAZ;AANJ;AAAA;;AAAA;AAAA;AAAA;AAQIO,YAAAA,OAAO,CAACC,GAAR;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYAhB,EAAAA,SAAS,CAAC,YAAM;AACdW,IAAAA,sBAAsB;AACvB,GAFQ,CAAT;;AAIA,MAAIJ,SAAJ,EAAe;AACb,WACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEU,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,cAAc,EAAE,QAA3B;AAAqCC,QAAAA,UAAU,EAAE;AAAjD,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,CADF;AAKD;;AAED,SACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD,CAAO,SAAP;AACE,IAAA,aAAa,EAAE;AACbC,MAAAA,WAAW,EAAE;AACXC,QAAAA,eAAe,EAAE;AADN,OADA;AAIbC,MAAAA,eAAe,EAAE,MAJJ;AAKbC,MAAAA,gBAAgB,EAAE,EALL;AAMbC,MAAAA,gBAAgB,EAAE;AANL,KADjB;AAAA;AAAA;AAAA;AAAA;AAAA,KASE,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,UAAAC,KAAK;AAAA,WAAI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAEf,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,MAAJ;AAAA,GADR,CATF,EAYGD,MAAM,IAAI,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,MAAnB;AAA0B,IAAA,SAAS,EAAEJ,UAArC;AAAA;AAAA;AAAA;AAAA;AAAA,IAZb,CADF,CADF;AAkBD","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { AsyncStorage } from \"react-native\";\n\nconst Stack = createStackNavigator();\n\nimport { LoginScreen } from \"./components/LoginScreen\";\nimport { SignInScreen } from \"./components/SignInScreen\";\nimport { HomeScreen } from \"./components/HomeScreen\";\n\nexport default function App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [logged, setLogged] = useState(false);\n\n  async function checkUserAlreadyLogged() {\n    try {\n      const userAlreadyLogged = await AsyncStorage.getItem(\"logged\");\n      if (!!userAlreadyLogged) {\n        setLogged(true);\n      }\n      setIsLoading(false);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  useEffect(() => {\n    checkUserAlreadyLogged();\n  });\n\n  if (isLoading) {\n    return (\n      <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n        <Text>Ecran de chargement</Text>\n      </View>\n    );\n  }\n\n  return (\n    <NavigationContainer>\n      <Stack.Navigator\n        screenOptions={{\n          headerStyle: {\n            backgroundColor: \"#1d1d1d\"\n          },\n          headerTintColor: \"#fff\",\n          headerTitleStyle: {},\n          headerTitleAlign: \"center\"\n        }}>\n        <Stack.Screen name=\"Login\">\n          {props => <LoginScreen setLogged={setLogged} />}\n        </Stack.Screen>\n        {logged && <Stack.Screen name=\"Home\" component={HomeScreen} />}\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\n/* <Stack.Screen name=\"SignIn\" component={SignInScreen} /> */\n"]},"metadata":{},"sourceType":"module"}