{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/elias/github/AwesomeProject/App.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { LoginScreen } from \"./components/LoginScreen\";\nimport { HomeScreen } from \"./components/HomeScreen\";\nexport default function App() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      logged = _useState4[0],\n      setLogged = _useState4[1];\n\n  function checkUserAlreadyLogged() {\n    var userAlreadyLogged;\n    return _regeneratorRuntime.async(function checkUserAlreadyLogged$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"logged\"));\n\n          case 3:\n            userAlreadyLogged = _context.sent;\n\n            if (!!userAlreadyLogged) {\n              setLogged(true);\n            }\n\n            setIsLoading(false);\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  }\n\n  useEffect(function () {\n    checkUserAlreadyLogged();\n    console.log(logged);\n  });\n\n  if (isLoading) {\n    return React.createElement(View, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      }\n    }, React.createElement(ActivityIndicator, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      }\n    }));\n  }\n\n  return React.createElement(NavigationContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    }\n  }, logged === false ? React.createElement(LoginStackScreen, {\n    setLogged: setLogged,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    }\n  }) : React.createElement(HomeStackScreen, {\n    setLogged: setLogged,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    }\n  }));\n}\nvar HomeStack = createStackNavigator();\n\nfunction HomeStackScreen(_ref) {\n  var setLogged = _ref.setLogged;\n  return React.createElement(HomeStack.Navigator, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    }\n  }, React.createElement(HomeStack.Screen, {\n    name: \"Home\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    }\n  }, function (props) {\n    return React.createElement(HomeScreen, _extends({}, props, {\n      setLogged: setLogged,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      }\n    }));\n  }));\n}\n\nvar LoginStack = createStackNavigator();\n\nfunction LoginStackScreen(_ref2) {\n  var setLogged = _ref2.setLogged;\n  return React.createElement(LoginStack.Navigator, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    }\n  }, React.createElement(LoginStack.Screen, {\n    name: \"Login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    }\n  }, function (props) {\n    return React.createElement(LoginScreen, _extends({}, props, {\n      setLogged: setLogged,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      }\n    }));\n  }));\n}","map":{"version":3,"sources":["/home/elias/github/AwesomeProject/App.tsx"],"names":["React","useState","useEffect","NavigationContainer","createStackNavigator","LoginScreen","HomeScreen","App","isLoading","setIsLoading","logged","setLogged","checkUserAlreadyLogged","AsyncStorage","getItem","userAlreadyLogged","console","log","HomeStack","HomeStackScreen","props","LoginStack","LoginStackScreen"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,oBAAT,QAAqC,yBAArC;;AAIA,SAASC,WAAT;AAEA,SAASC,UAAT;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA,kBACMN,QAAQ,CAAC,IAAD,CADd;AAAA;AAAA,MACrBO,SADqB;AAAA,MACVC,YADU;;AAAA,mBAEAR,QAAQ,CAAC,KAAD,CAFR;AAAA;AAAA,MAErBS,MAFqB;AAAA,MAEbC,SAFa;;AAI5B,WAAeC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEoCC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAFpC;;AAAA;AAEUC,YAAAA,iBAFV;;AAGI,gBAAI,CAAC,CAACA,iBAAN,EAAyB;AACvBJ,cAAAA,SAAS,CAAC,IAAD,CAAT;AACD;;AACDF,YAAAA,YAAY,CAAC,KAAD,CAAZ;AANJ;AAAA;;AAAA;AAAA;AAAA;AAQIO,YAAAA,OAAO,CAACC,GAAR;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYAf,EAAAA,SAAS,CAAC,YAAM;AACdU,IAAAA,sBAAsB;AACtBI,IAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;AACD,GAHQ,CAAT;;AAKA,MAAIF,SAAJ,EAAe;AACb,WACJ,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADI;AAKD;;AAED,SACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,MAAM,KAAK,KAAX,GACC,oBAAC,gBAAD;AAAkB,IAAA,SAAS,EAAEC,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAGC,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAEA,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADF;AASD;AAED,IAAMO,SAAS,GAAGd,oBAAoB,EAAtC;;AAEA,SAASe,eAAT,OAAwC;AAAA,MAAbR,SAAa,QAAbA,SAAa;AACtC,SACE,oBAAC,SAAD,CAAW,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD,CAAW,MAAX;AAAkB,IAAA,IAAI,EAAC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,UAAAS,KAAK;AAAA,WAAI,oBAAC,UAAD,eAAgBA,KAAhB;AAAuB,MAAA,SAAS,EAAET,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,OAAJ;AAAA,GADR,CADF,CADF;AAOD;;AAED,IAAMU,UAAU,GAAGjB,oBAAoB,EAAvC;;AAEA,SAASkB,gBAAT,QAAyC;AAAA,MAAbX,SAAa,SAAbA,SAAa;AACvC,SACE,oBAAC,UAAD,CAAY,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD,CAAY,MAAZ;AAAmB,IAAA,IAAI,EAAC,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,UAAAS,KAAK;AAAA,WAAI,oBAAC,WAAD,eAAiBA,KAAjB;AAAwB,MAAA,SAAS,EAAET,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,OAAJ;AAAA,GADR,CADF,CADF;AAOD","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { StyleSheet, Text, View, ActivityIndicator } from \"react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { AsyncStorage } from \"react-native\";\n\nimport { LoginScreen } from \"./components/LoginScreen\";\nimport { SignInScreen } from \"./components/SignInScreen\";\nimport { HomeScreen } from \"./components/HomeScreen\";\n\nexport default function App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [logged, setLogged] = useState(false);\n\n  async function checkUserAlreadyLogged() {\n    try {\n      const userAlreadyLogged = await AsyncStorage.getItem(\"logged\");\n      if (!!userAlreadyLogged) {\n        setLogged(true);\n      }\n      setIsLoading(false);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  useEffect(() => {\n    checkUserAlreadyLogged();\n    console.log(logged);\n  });\n\n  if (isLoading) {\n    return (\n<View>\n<ActivityIndicator />\n</View>\n        )\n  }\n\n  return (\n    <NavigationContainer>\n      {logged === false ? (\n        <LoginStackScreen setLogged={setLogged} />\n      ) : (\n        <HomeStackScreen setLogged={setLogged} />\n      )}\n    </NavigationContainer>\n  );\n}\n\nconst HomeStack = createStackNavigator();\n\nfunction HomeStackScreen({ setLogged }) {\n  return (\n    <HomeStack.Navigator>\n      <HomeStack.Screen name=\"Home\">\n        {props => <HomeScreen {...props} setLogged={setLogged} />}\n      </HomeStack.Screen>\n    </HomeStack.Navigator>\n  );\n}\n\nconst LoginStack = createStackNavigator();\n\nfunction LoginStackScreen({ setLogged }) {\n  return (\n    <LoginStack.Navigator>\n      <LoginStack.Screen name=\"Login\">\n        {props => <LoginScreen {...props} setLogged={setLogged} />}\n      </LoginStack.Screen>\n    </LoginStack.Navigator>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}